## 🔹 Fluxo da importação 

1. **Upload do CSV**

   * Usuário arrasta o arquivo → sistema faz parsing das linhas.
   * Mostra uma *prévia* (ex: 10 primeiras linhas) só pra dar confiança.

---

2. **Motor de classificação automática (busca similaridade)**
   Para cada linha nova:

   * Procurar no **histórico de transações**:
     *Match exato*: mesma descrição.
     *Match parcial*: `LIKE` em palavras-chave (`%UBER%`, `%IFOOD%`).
   * Se achar → traz categoria/subcategoria/fornecedor automaticamente.
   * Se não achar → marca como “pendente”.

---

3. **Resumo inicial (cards + relatório)**
   Antes de mostrar a tabela toda:

   * 2 cards de resumo (Entradas / Saídas).
   * Um relatório simples:

     * `X% transações classificadas automaticamente`
     * `Y transações pendentes de classificação`

   👉 Isso já dá clareza pro usuário: “a maior parte já está resolvida, só falta revisar o resto”.

---

4. **Tela de pré-visualização (tabela)**

   * Todas as transações listadas.
   * Colunas: Data, Descrição, Valor, Categoria, Subcategoria, Centro de Custo, Fornecedor.
   * Campos preenchidos automaticamente quando bateu similaridade.
   * Linhas pendentes ficam destacadas (ex: cor diferente, badge “não classificado”).

---

5. **Modal de classificação rápida (para pendentes)**

   * Usuário clica na linha pendente → abre modal.
   * Modal sugere opções (ex.: categorias mais usadas com descrições parecidas).
   * Usuário escolhe e confirma.
   * Botão: *“Aplicar esta escolha sempre que encontrar algo parecido”* → cria regra de similaridade.

---

6. **Confirmação final**

   * Botão *“Importar”*.
   * Tudo que foi classificado vai para a tabela `transacoes`.
   * O que o usuário classificou manualmente também já entra com a regra salva.

---

## 🔹 Boas práticas embutidas nesse fluxo

* **Nada de hardcoding** → todo aprendizado vem de histórico ou regra gravada no banco.
* **Feedback imediato** → cards de resumo mostram o que já deu certo.
* **Correção on-the-fly** → modal resolve pendências sem sair do fluxo.
* **Aprendizado contínuo** → cada correção do usuário deixa o sistema mais inteligente.
* **Escalabilidade** → funciona bem tanto para usuário único (financeiro pessoal) quanto multiusuário (SaaS).

---

📌 **Exemplo real** (trazendo pra vida prática):
Usuário importa CSV com 100 linhas:

* O sistema reconhece 75% (porque já viu antes no histórico).
* Mostra 25 linhas pendentes.
* Usuário corrige 10 linhas no modal e marca como “sempre aplicar”.
* Próxima vez, essas 10 já virão classificadas automaticamente.

tudo isso tem que 



- Siga estritamente a cultura do código existente e as instruções do arquivo @CLAUDE.md.

- se houver criticas sobre o plano, quero ouvir sugestões

- ser gerados perguntas para que não aja surpresas do que a ia ir acriar frente a expectativa do desenvolvedor 
