-- =====================================================
-- VALIDA√á√ÉO COMPLETA DE POL√çTICAS RLS
-- Execute este script no SQL Editor do Supabase
-- =====================================================

-- Fun√ß√£o para executar todos os testes RLS
CREATE OR REPLACE FUNCTION validar_rls_completo()
RETURNS TABLE (
  secao TEXT,
  item TEXT,
  status TEXT,
  detalhes TEXT,
  observacoes TEXT
) AS $$
DECLARE
  tabela TEXT;
  resultado RECORD;
  tabelas_esperadas TEXT[] := ARRAY['fp_categorias', 'fp_subcategorias', 'fp_contas', 'fp_cartoes', 'fp_transacoes', 'fp_parcelas_fixas', 'fp_projetos_pessoais'];
  tabelas_sem_rls TEXT[] := '{}';
  tabelas_sem_workspace TEXT[] := '{}';
  policies_count INTEGER;
  function_exists BOOLEAN;
BEGIN
  -- ================================================
  -- 1. VERIFICAR RLS HABILITADO
  -- ================================================
  
  RETURN QUERY SELECT 
    'RLS_STATUS'::TEXT,
    'Verifica√ß√£o Inicial'::TEXT,
    'üîç ANALISANDO'::TEXT,
    'Verificando status RLS em todas as tabelas'::TEXT,
    'Tabelas que precisam ter RLS habilitado'::TEXT;

  FOR tabela IN 
    SELECT unnest(tabelas_esperadas)
  LOOP
    IF EXISTS (
      SELECT 1 FROM pg_class c
      WHERE c.relname = tabela
      AND c.relrowsecurity = true
    ) THEN
      RETURN QUERY SELECT 
        'RLS_STATUS'::TEXT,
        tabela::TEXT,
        '‚úÖ HABILITADO'::TEXT,
        'RLS est√° ativo'::TEXT,
        'Pol√≠ticas podem ser aplicadas'::TEXT;
    ELSE
      tabelas_sem_rls := array_append(tabelas_sem_rls, tabela);
      RETURN QUERY SELECT 
        'RLS_STATUS'::TEXT,
        tabela::TEXT,
        '‚ùå DESABILITADO'::TEXT,
        'RLS n√£o est√° ativo'::TEXT,
        'CR√çTICO: Dados expostos sem prote√ß√£o'::TEXT;
    END IF;
  END LOOP;

  -- ================================================
  -- 2. VERIFICAR WORKSPACE_ID
  -- ================================================
  
  RETURN QUERY SELECT 
    'WORKSPACE_ID'::TEXT,
    'Verifica√ß√£o Inicial'::TEXT,
    'üîç ANALISANDO'::TEXT,
    'Verificando coluna workspace_id'::TEXT,
    'Todas as tabelas principais devem ter workspace_id'::TEXT;

  FOR tabela IN 
    SELECT unnest(tabelas_esperadas)
  LOOP
    IF EXISTS (
      SELECT 1 FROM information_schema.columns
      WHERE table_schema = 'public'
      AND table_name = tabela
      AND column_name = 'workspace_id'
    ) THEN
      RETURN QUERY SELECT 
        'WORKSPACE_ID'::TEXT,
        tabela::TEXT,
        '‚úÖ PRESENTE'::TEXT,
        'Coluna workspace_id existe'::TEXT,
        'Tabela preparada para multiusu√°rio'::TEXT;
    ELSE
      tabelas_sem_workspace := array_append(tabelas_sem_workspace, tabela);
      RETURN QUERY SELECT 
        'WORKSPACE_ID'::TEXT,
        tabela::TEXT,
        '‚ùå AUSENTE'::TEXT,
        'Coluna workspace_id n√£o existe'::TEXT,
        'CR√çTICO: Tabela n√£o suporta multiusu√°rio'::TEXT;
    END IF;
  END LOOP;

  -- ================================================
  -- 3. CONTAR POL√çTICAS RLS
  -- ================================================
  
  SELECT COUNT(*) INTO policies_count
  FROM pg_policies 
  WHERE schemaname = 'public' 
    AND tablename = ANY(tabelas_esperadas);

  RETURN QUERY SELECT 
    'POLICIES_COUNT'::TEXT,
    'Total de Pol√≠ticas'::TEXT,
    CASE 
      WHEN policies_count >= 28 THEN '‚úÖ SUFICIENTE'
      WHEN policies_count >= 14 THEN '‚ö†Ô∏è PARCIAL'
      ELSE '‚ùå INSUFICIENTE'
    END,
    format('%s pol√≠ticas encontradas', policies_count)::TEXT,
    CASE 
      WHEN policies_count >= 28 THEN 'Esperado: 28 pol√≠ticas (4 √ó 7 tabelas)'
      ELSE format('Faltam %s pol√≠ticas para completar', 28 - policies_count)
    END;

  -- ================================================
  -- 4. DETALHAR POL√çTICAS POR TABELA
  -- ================================================
  
  FOR tabela IN 
    SELECT unnest(tabelas_esperadas)
  LOOP
    DECLARE
      select_policy BOOLEAN := FALSE;
      insert_policy BOOLEAN := FALSE;
      update_policy BOOLEAN := FALSE;
      delete_policy BOOLEAN := FALSE;
      missing_ops TEXT[] := '{}';
    BEGIN
      -- Verificar cada tipo de opera√ß√£o
      SELECT EXISTS(
        SELECT 1 FROM pg_policies 
        WHERE schemaname = 'public' 
          AND tablename = tabela 
          AND cmd = 'SELECT'
      ) INTO select_policy;
      
      SELECT EXISTS(
        SELECT 1 FROM pg_policies 
        WHERE schemaname = 'public' 
          AND tablename = tabela 
          AND cmd = 'INSERT'
      ) INTO insert_policy;
      
      SELECT EXISTS(
        SELECT 1 FROM pg_policies 
        WHERE schemaname = 'public' 
          AND tablename = tabela 
          AND cmd = 'UPDATE'
      ) INTO update_policy;
      
      SELECT EXISTS(
        SELECT 1 FROM pg_policies 
        WHERE schemaname = 'public' 
          AND tablename = tabela 
          AND cmd = 'DELETE'
      ) INTO delete_policy;

      -- Identificar opera√ß√µes faltantes
      IF NOT select_policy THEN missing_ops := array_append(missing_ops, 'SELECT'); END IF;
      IF NOT insert_policy THEN missing_ops := array_append(missing_ops, 'INSERT'); END IF;
      IF NOT update_policy THEN missing_ops := array_append(missing_ops, 'UPDATE'); END IF;
      IF NOT delete_policy THEN missing_ops := array_append(missing_ops, 'DELETE'); END IF;

      RETURN QUERY SELECT 
        'POLICIES_DETAIL'::TEXT,
        tabela::TEXT,
        CASE 
          WHEN array_length(missing_ops, 1) IS NULL THEN '‚úÖ COMPLETO'
          WHEN array_length(missing_ops, 1) <= 2 THEN '‚ö†Ô∏è PARCIAL'
          ELSE '‚ùå INCOMPLETO'
        END,
        CASE 
          WHEN array_length(missing_ops, 1) IS NULL THEN 'Todas as opera√ß√µes protegidas'
          ELSE format('Opera√ß√µes protegidas: %s/%s', 4 - COALESCE(array_length(missing_ops, 1), 0), 4)
        END,
        CASE 
          WHEN array_length(missing_ops, 1) IS NULL THEN 'SELECT, INSERT, UPDATE, DELETE'
          ELSE format('Faltam: %s', array_to_string(missing_ops, ', '))
        END;
    END;
  END LOOP;

  -- ================================================
  -- 5. VERIFICAR FUN√á√ÉO HELPER
  -- ================================================
  
  SELECT EXISTS(
    SELECT 1 FROM pg_proc WHERE proname = 'get_user_workspace_id'
  ) INTO function_exists;

  RETURN QUERY SELECT 
    'HELPER_FUNCTION'::TEXT,
    'get_user_workspace_id()'::TEXT,
    CASE 
      WHEN function_exists THEN '‚úÖ EXISTE'
      ELSE '‚ùå AUSENTE'
    END,
    CASE 
      WHEN function_exists THEN 'Fun√ß√£o helper dispon√≠vel'
      ELSE 'Fun√ß√£o helper n√£o encontrada'
    END,
    CASE 
      WHEN function_exists THEN 'Pol√≠ticas podem usar auth.uid() para workspace'
      ELSE 'CR√çTICO: Pol√≠ticas n√£o podem determinar workspace'
    END;

  -- ================================================
  -- 6. TESTE DE SIMULA√á√ÉO (usando auth.uid())
  -- ================================================
  
  RETURN QUERY SELECT 
    'SIMULATION_TEST'::TEXT,
    'Teste com auth.uid()'::TEXT,
    'üîÑ SIMULA√á√ÉO'::TEXT,
    'Testando fun√ß√£o auth.uid() nas pol√≠ticas'::TEXT,
    'Verifica se as pol√≠ticas podem acessar usu√°rio atual'::TEXT;

  -- Tentar executar auth.uid() para verificar se est√° dispon√≠vel
  BEGIN
    PERFORM auth.uid();
    RETURN QUERY SELECT 
      'SIMULATION_TEST'::TEXT,
      'auth.uid() funcional'::TEXT,
      '‚úÖ DISPON√çVEL'::TEXT,
      'Fun√ß√£o auth.uid() responde'::TEXT,
      'Pol√≠ticas podem identificar usu√°rio logado'::TEXT;
  EXCEPTION
    WHEN OTHERS THEN
      RETURN QUERY SELECT 
        'SIMULATION_TEST'::TEXT,
        'auth.uid() com erro'::TEXT,
        '‚ö†Ô∏è INDISPON√çVEL'::TEXT,
        'Fun√ß√£o auth.uid() n√£o responde no contexto atual'::TEXT,
        'Normal em execu√ß√£o SQL direta, funciona via API'::TEXT;
  END;

  -- ================================================
  -- 7. RESUMO FINAL
  -- ================================================
  
  RETURN QUERY SELECT 
    'RESUMO_FINAL'::TEXT,
    'Status Geral RLS'::TEXT,
    CASE 
      WHEN COALESCE(array_length(tabelas_sem_rls, 1), 0) = 0 
       AND COALESCE(array_length(tabelas_sem_workspace, 1), 0) = 0 
       AND policies_count >= 28 
       AND function_exists
      THEN '‚úÖ SISTEMA SEGURO'
      WHEN COALESCE(array_length(tabelas_sem_rls, 1), 0) = 0 
       AND policies_count >= 14
      THEN '‚ö†Ô∏è PARCIALMENTE SEGURO'
      ELSE '‚ùå SISTEMA VULNER√ÅVEL'
    END,
    format('RLS: %s/%s | Policies: %s/28 | Helper: %s', 
           7 - COALESCE(array_length(tabelas_sem_rls, 1), 0), 
           7,
           policies_count,
           CASE WHEN function_exists THEN 'OK' ELSE 'FALTA' END
    )::TEXT,
    CASE 
      WHEN COALESCE(array_length(tabelas_sem_rls, 1), 0) = 0 
       AND COALESCE(array_length(tabelas_sem_workspace, 1), 0) = 0 
       AND policies_count >= 28 
       AND function_exists
      THEN 'Sistema pronto para produ√ß√£o multiusu√°rio'
      ELSE 'Sistema requer configura√ß√£o adicional de seguran√ßa'
    END;

  -- ================================================
  -- 8. PR√ìXIMOS PASSOS (se houver problemas)
  -- ================================================
  
  IF COALESCE(array_length(tabelas_sem_rls, 1), 0) > 0 
   OR COALESCE(array_length(tabelas_sem_workspace, 1), 0) > 0 
   OR policies_count < 28 
   OR NOT function_exists THEN
    
    RETURN QUERY SELECT 
      'PROXIMOS_PASSOS'::TEXT,
      'A√ß√µes Requeridas'::TEXT,
      'üîß CONFIGURAR'::TEXT,
      'Itens que precisam ser corrigidos'::TEXT,
      'Execute as migra√ß√µes apropriadas para resolver'::TEXT;

    IF COALESCE(array_length(tabelas_sem_rls, 1), 0) > 0 THEN
      RETURN QUERY SELECT 
        'PROXIMOS_PASSOS'::TEXT,
        'Habilitar RLS'::TEXT,
        '‚ùó URGENTE'::TEXT,
        format('ALTER TABLE %s ENABLE ROW LEVEL SECURITY;', array_to_string(tabelas_sem_rls, ', '))::TEXT,
        'Execute para cada tabela listada'::TEXT;
    END IF;

    IF NOT function_exists THEN
      RETURN QUERY SELECT 
        'PROXIMOS_PASSOS'::TEXT,
        'Criar fun√ß√£o helper'::TEXT,
        '‚ùó NECESS√ÅRIO'::TEXT,
        'CREATE FUNCTION get_user_workspace_id()'::TEXT,
        'Fun√ß√£o para mapear auth.uid() -> workspace_id'::TEXT;
    END IF;

    IF policies_count < 28 THEN
      RETURN QUERY SELECT 
        'PROXIMOS_PASSOS'::TEXT,
        'Criar pol√≠ticas RLS'::TEXT,
        '‚ùó CR√çTICO'::TEXT,
        format('Criar %s pol√≠ticas adicionais', 28 - policies_count)::TEXT,
        'Uma pol√≠tica para cada opera√ß√£o (SELECT/INSERT/UPDATE/DELETE)'::TEXT;
    END IF;
  END IF;

END;
$$ LANGUAGE plpgsql;

-- Executar a valida√ß√£o completa
SELECT * FROM validar_rls_completo();