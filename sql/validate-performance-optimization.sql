-- =====================================================
-- VALIDA√á√ÉO DAS OTIMIZA√á√ïES DE PERFORMANCE
-- Data: 29/08/2025
-- Objetivo: Verificar se as otimiza√ß√µes foram aplicadas
-- =====================================================

-- =====================================================
-- 1. VERIFICA√á√ÉO DOS √çNDICES CRIADOS
-- =====================================================

\echo '=== VERIFICANDO √çNDICES CR√çTICOS ==='

-- Verificar se os √≠ndices cr√≠ticos foram criados
DO $$
DECLARE
    indices_criados integer := 0;
    indices_esperados text[] := ARRAY[
        'idx_fp_convites_links_codigo_active',
        'idx_fp_usuarios_workspace_active',
        'idx_fp_convites_links_workspace_active_expires',
        'idx_fp_transacoes_workspace_data_tipo'
    ];
    indice_nome text;
BEGIN
    -- Verificar cada √≠ndice esperado
    FOREACH indice_nome IN ARRAY indices_esperados
    LOOP
        IF EXISTS (
            SELECT 1 FROM pg_indexes 
            WHERE indexname = indice_nome AND schemaname = 'public'
        ) THEN
            indices_criados := indices_criados + 1;
            RAISE NOTICE '‚úÖ √çndice encontrado: %', indice_nome;
        ELSE
            RAISE WARNING '‚ùå √çndice FALTANDO: %', indice_nome;
        END IF;
    END LOOP;
    
    RAISE NOTICE '';
    RAISE NOTICE 'RESULTADO: % de % √≠ndices cr√≠ticos criados', indices_criados, array_length(indices_esperados, 1);
    
    IF indices_criados = array_length(indices_esperados, 1) THEN
        RAISE NOTICE 'üéâ TODOS OS √çNDICES CR√çTICOS EST√ÉO CRIADOS!';
    ELSE
        RAISE WARNING '‚ö†Ô∏è  ALGUNS √çNDICES CR√çTICOS EST√ÉO FALTANDO!';
    END IF;
END $$;

-- =====================================================
-- 2. TESTE DE PERFORMANCE DAS QUERIES CR√çTICAS
-- =====================================================

\echo ''
\echo '=== TESTANDO PERFORMANCE DAS QUERIES CR√çTICAS ==='

-- Obter IDs reais para teste
DO $$
DECLARE
    test_workspace_id uuid;
    test_codigo text;
    execution_time_ms numeric;
BEGIN
    -- Obter um workspace real
    SELECT id INTO test_workspace_id FROM fp_workspaces LIMIT 1;
    
    -- Obter ou criar um c√≥digo de convite para teste
    SELECT codigo INTO test_codigo FROM fp_convites_links WHERE ativo = true LIMIT 1;
    
    IF test_codigo IS NULL THEN
        test_codigo := 'PERF01';
        INSERT INTO fp_convites_links (workspace_id, codigo, criado_por, expires_at, ativo)
        VALUES (test_workspace_id, test_codigo, (SELECT owner_id FROM fp_workspaces WHERE id = test_workspace_id), NOW() + INTERVAL '7 days', true)
        ON CONFLICT (codigo) DO NOTHING;
    END IF;
    
    RAISE NOTICE 'Usando Workspace ID: %', test_workspace_id;
    RAISE NOTICE 'Usando C√≥digo de Teste: %', test_codigo;
END $$;

-- Teste 1: Valida√ß√£o de c√≥digo de convite (QUERY MAIS CR√çTICA)
\echo ''
\echo '--- TESTE 1: Valida√ß√£o de c√≥digo de convite ---'
EXPLAIN (ANALYZE, BUFFERS, FORMAT JSON)
SELECT c.*, w.nome as workspace_nome
FROM fp_convites_links c
JOIN fp_workspaces w ON c.workspace_id = w.id
WHERE c.codigo = (SELECT codigo FROM fp_convites_links WHERE ativo = true LIMIT 1)
  AND c.ativo = true
  AND c.expires_at >= NOW();

-- Teste 2: Lista de usu√°rios por workspace
\echo ''
\echo '--- TESTE 2: Lista de usu√°rios por workspace ---'
EXPLAIN (ANALYZE, BUFFERS, FORMAT JSON)
SELECT 
    id, workspace_id, nome, role, ativo, created_at, updated_at
FROM fp_usuarios 
WHERE workspace_id = (SELECT id FROM fp_workspaces LIMIT 1)
  AND ativo = true;

-- Teste 3: Lista de convites ativos
\echo ''
\echo '--- TESTE 3: Lista de convites ativos ---'
EXPLAIN (ANALYZE, BUFFERS, FORMAT JSON)
SELECT *
FROM fp_convites_links
WHERE workspace_id = (SELECT id FROM fp_workspaces LIMIT 1)
  AND ativo = true
  AND expires_at >= NOW()
ORDER BY created_at DESC;

-- =====================================================
-- 3. AN√ÅLISE DE USO DOS √çNDICES
-- =====================================================

\echo ''
\echo '=== AN√ÅLISE DE USO DOS √çNDICES ==='

-- Verificar quais √≠ndices est√£o sendo usados
SELECT 
    schemaname,
    tablename,
    indexname,
    idx_scan as "Vezes Usado",
    CASE 
        WHEN idx_scan = 0 THEN '‚ùå Nunca usado'
        WHEN idx_scan < 10 THEN '‚ö†Ô∏è Pouco usado'
        WHEN idx_scan < 100 THEN '‚úÖ Uso moderado'
        ELSE 'üéâ Muito usado'
    END as "Status",
    pg_size_pretty(pg_relation_size(indexname::regclass)) as "Tamanho"
FROM pg_stat_user_indexes
WHERE tablename IN ('fp_convites_links', 'fp_usuarios', 'fp_workspaces', 'fp_transacoes')
  AND indexname LIKE 'idx_%'
ORDER BY tablename, idx_scan DESC;

-- =====================================================
-- 4. VERIFICA√á√ÉO DE SA√öDE DAS TABELAS
-- =====================================================

\echo ''
\echo '=== VERIFICA√á√ÉO DE SA√öDE DAS TABELAS ==='

SELECT 
    schemaname,
    relname as "Tabela",
    n_live_tup as "Registros Vivos",
    n_dead_tup as "Registros Mortos",
    CASE 
        WHEN n_live_tup + n_dead_tup = 0 THEN 0
        ELSE ROUND((n_dead_tup * 100.0) / (n_live_tup + n_dead_tup), 2)
    END as "% Mortos",
    CASE 
        WHEN n_live_tup + n_dead_tup = 0 THEN '‚úÖ Vazia'
        WHEN (n_dead_tup * 100.0) / (n_live_tup + n_dead_tup) < 10 THEN '‚úÖ Saud√°vel'
        WHEN (n_dead_tup * 100.0) / (n_live_tup + n_dead_tup) < 25 THEN '‚ö†Ô∏è Precisa VACUUM'
        ELSE '‚ùå Precisa VACUUM URGENTE'
    END as "Status Sa√∫de",
    last_analyze as "√öltimo ANALYZE"
FROM pg_stat_user_tables 
WHERE relname IN ('fp_convites_links', 'fp_usuarios', 'fp_workspaces', 'fp_transacoes', 'fp_categorias')
ORDER BY n_live_tup DESC;

-- =====================================================
-- 5. BENCHMARK DE PERFORMANCE COMPARATIVO
-- =====================================================

\echo ''
\echo '=== BENCHMARK DE PERFORMANCE ==='

-- Fun√ß√£o para medir tempo de execu√ß√£o
CREATE OR REPLACE FUNCTION measure_query_time(query_text text) 
RETURNS numeric AS $$
DECLARE
    start_time timestamp;
    end_time timestamp;
    execution_time_ms numeric;
BEGIN
    start_time := clock_timestamp();
    EXECUTE query_text;
    end_time := clock_timestamp();
    execution_time_ms := EXTRACT(EPOCH FROM (end_time - start_time)) * 1000;
    RETURN execution_time_ms;
END;
$$ LANGUAGE plpgsql;

-- Benchmark das queries cr√≠ticas
DO $$
DECLARE
    tempo_validacao numeric;
    tempo_usuarios numeric;
    tempo_convites numeric;
    test_workspace_id uuid;
    test_codigo text;
BEGIN
    -- Obter dados para teste
    SELECT id INTO test_workspace_id FROM fp_workspaces LIMIT 1;
    SELECT codigo INTO test_codigo FROM fp_convites_links WHERE ativo = true LIMIT 1;
    
    IF test_codigo IS NULL THEN
        test_codigo := 'BENCH01';
        INSERT INTO fp_convites_links (workspace_id, codigo, criado_por, expires_at)
        VALUES (test_workspace_id, test_codigo, (SELECT owner_id FROM fp_workspaces WHERE id = test_workspace_id), NOW() + INTERVAL '1 day')
        ON CONFLICT (codigo) DO NOTHING;
    END IF;
    
    -- Medir tempo das queries
    SELECT measure_query_time(format(
        'SELECT c.*, w.nome FROM fp_convites_links c JOIN fp_workspaces w ON c.workspace_id = w.id WHERE c.codigo = %L AND c.ativo = true AND c.expires_at >= NOW()',
        test_codigo
    )) INTO tempo_validacao;
    
    SELECT measure_query_time(format(
        'SELECT COUNT(*) FROM fp_usuarios WHERE workspace_id = %L AND ativo = true',
        test_workspace_id
    )) INTO tempo_usuarios;
    
    SELECT measure_query_time(format(
        'SELECT COUNT(*) FROM fp_convites_links WHERE workspace_id = %L AND ativo = true AND expires_at >= NOW()',
        test_workspace_id
    )) INTO tempo_convites;
    
    -- Relat√≥rio de performance
    RAISE NOTICE '';
    RAISE NOTICE 'üöÄ BENCHMARK DE PERFORMANCE:';
    RAISE NOTICE '';
    RAISE NOTICE 'Query de Valida√ß√£o de Convite: % ms %', 
        ROUND(tempo_validacao, 2), 
        CASE WHEN tempo_validacao < 10 THEN '‚úÖ' WHEN tempo_validacao < 50 THEN '‚ö†Ô∏è' ELSE '‚ùå' END;
    RAISE NOTICE 'Query de Lista de Usu√°rios: % ms %', 
        ROUND(tempo_usuarios, 2),
        CASE WHEN tempo_usuarios < 20 THEN '‚úÖ' WHEN tempo_usuarios < 100 THEN '‚ö†Ô∏è' ELSE '‚ùå' END;
    RAISE NOTICE 'Query de Lista de Convites: % ms %', 
        ROUND(tempo_convites, 2),
        CASE WHEN tempo_convites < 10 THEN '‚úÖ' WHEN tempo_convites < 50 THEN '‚ö†Ô∏è' ELSE '‚ùå' END;
    RAISE NOTICE '';
    
    -- Avalia√ß√£o geral
    IF tempo_validacao < 10 AND tempo_usuarios < 20 AND tempo_convites < 10 THEN
        RAISE NOTICE 'üéâ PERFORMANCE EXCELENTE! Sistema otimizado com sucesso.';
    ELSIF tempo_validacao < 50 AND tempo_usuarios < 100 AND tempo_convites < 50 THEN
        RAISE NOTICE '‚úÖ PERFORMANCE BOA. Sistema funcionando adequadamente.';
    ELSE
        RAISE WARNING '‚ö†Ô∏è PERFORMANCE PODE MELHORAR. Verificar se √≠ndices foram criados.';
    END IF;
END $$;

-- =====================================================
-- 6. RELAT√ìRIO FINAL DE VALIDA√á√ÉO
-- =====================================================

\echo ''
\echo '=== RELAT√ìRIO FINAL DE VALIDA√á√ÉO ==='

DO $$
DECLARE
    indices_count integer;
    tables_analyzed integer;
    performance_score integer := 0;
BEGIN
    -- Contar √≠ndices cr√≠ticos
    SELECT COUNT(*) INTO indices_count
    FROM pg_indexes 
    WHERE indexname IN (
        'idx_fp_convites_links_codigo_active',
        'idx_fp_usuarios_workspace_active',
        'idx_fp_convites_links_workspace_active_expires',
        'idx_fp_transacoes_workspace_data_tipo'
    ) AND schemaname = 'public';
    
    -- Contar tabelas que foram analisadas recentemente
    SELECT COUNT(*) INTO tables_analyzed
    FROM pg_stat_user_tables 
    WHERE relname IN ('fp_convites_links', 'fp_usuarios', 'fp_workspaces', 'fp_transacoes')
      AND last_analyze > NOW() - INTERVAL '1 day';
    
    -- Calcular score de performance
    performance_score := (indices_count * 25); -- 25 pontos por √≠ndice cr√≠tico
    
    RAISE NOTICE '';
    RAISE NOTICE 'üìä RESUMO DA VALIDA√á√ÉO:';
    RAISE NOTICE '‚îú‚îÄ √çndices cr√≠ticos criados: %/4 (% pontos)', indices_count, indices_count * 25;
    RAISE NOTICE '‚îú‚îÄ Tabelas analisadas: %/4', tables_analyzed;
    RAISE NOTICE '‚îî‚îÄ Score de Performance: %/100', performance_score;
    RAISE NOTICE '';
    
    IF performance_score >= 100 THEN
        RAISE NOTICE 'üèÜ OTIMIZA√á√ÉO COMPLETA! Sistema multiusu√°rio totalmente otimizado.';
    ELSIF performance_score >= 75 THEN
        RAISE NOTICE '‚úÖ OTIMIZA√á√ÉO BOA! Principais melhorias implementadas.';
    ELSIF performance_score >= 50 THEN
        RAISE NOTICE '‚ö†Ô∏è OTIMIZA√á√ÉO PARCIAL! Alguns √≠ndices ainda precisam ser criados.';
    ELSE
        RAISE NOTICE '‚ùå OTIMIZA√á√ÉO INCOMPLETA! Execute o script optimize-indexes-multiuser.sql';
    END IF;
    
    RAISE NOTICE '';
    RAISE NOTICE 'üìù Para completar a otimiza√ß√£o, execute:';
    RAISE NOTICE '   psql -f sql/optimize-indexes-multiuser.sql';
END $$;

-- Limpar fun√ß√£o tempor√°ria
DROP FUNCTION IF EXISTS measure_query_time(text);

-- Limpar dados de teste
DELETE FROM fp_convites_links WHERE codigo IN ('PERF01', 'BENCH01');

\echo ''
\echo '‚úÖ VALIDA√á√ÉO CONCLU√çDA!'
\echo ''